#!/bin/bash
#################
# Parse command #
#################

set -e

error=0
force=0
project_dir=""

while [ "$1" != "" ]; do
    case $1 in
        -f )       force=1
		   ;;
	-* )       error=1
                   ;;
        * )       if [ "$project_dir" == "" ]; then 
		      project_dir=$1 
		  else 
		      error=1 
		  fi 
    esac
    shift
done

if [ $error == 1 ]; then
    echo "Usage: $(basename $0) project_dir -f"
    echo ""
    echo " Create a directory 'project_dir' and populate it with some configuration files"
    echo " By default never overwrite files, use -f to force overwriting"
    exit 0
fi

project_name=$(basename "$project_dir")

##########################
# Creates root directory #
##########################

echo "Creates directory $project_dir" 
mkdir -p "$project_dir"

#############################
# Creates setup dir & files #
#############################

echo "Creates directory $project_dir/setup" 
mkdir -p "$project_dir/setup"

#----------------

current_file="$project_dir/setup/setup.el"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
;; Configuration message
(message (format "Configuring %s" my-project-root))
;; use =minted= for listings
(setq org-latex-listings 'minted)
;; Load =library-of-babel.org=
(org-babel-lob-ingest (concat my-project-root "setup/library-of-babel.org"))
;; =org-publish-project-alist= definition
(setq my-publish-dir (concat my-project-root "docs"))

(defun my-org-publish-sitemap (title list)
  "Create my own index.org instead of the default one"
  (concat
   "#+CALL: Setup()\n"
   "#+INCLUDE: \"setup/index_preamble.org\"\n"
   "#+OPTIONS: toc:nil\n\n"
   "* My Sitemap\n\n"
   (org-list-to-org list)
   "\n\n"))

(setq org-publish-project-alist
      `(
	("My_Project_Name-org-files",
	 :base-directory ,my-project-root
	 :base-extension "org"
	 :recursive t
	 :publishing-directory ,my-publish-dir
	 :publishing-function org-html-publish-to-html
	 :sitemap-function my-org-publish-sitemap
	 :htmlize-source t
	 :sitemap-sort-files anti-chronologically
	 :exclude "setup/*"
	 ;; Generates theindex.org + inc files
	 :makeindex t
	 ;; Creates index.org, calls my-org-publish-sitemap to fill it
	 :auto-sitemap t
	 :sitemap-filename "index.org"
	 )

	("My_Project_Name-data-files",
	 :base-directory ,my-project-root
	 :base-extension "nb\\|?pp\\|png"
	 :recursive t
	 :publishing-directory ,my-publish-dir
	 :publishing-function org-publish-attachment
	 :exclude ".*bazel-.*"
	 )

	;; Main
	("My_Project_Name",
	 :components ("My_Project_Name-org-files" "My_Project_Name-data-files")
	 )
	)
      )

(setq org-agenda-files
      (split-string
       (shell-command-to-string (format "cd %s; find -name '*.org' ! -name 'index.org'  ! -name 'agenda.org'  ! -name '.#*' ! -path './setup/*'" my-project-root))
       ))
(setq my-www-links-filename (concat my-project-root "www_links.org"))
(setq my-journal-filename (concat my-project-root "journal.org"))
(setq my-todo-filename (concat my-project-root "todo.org"))

(setq-default org-display-custom-times t)
(setq org-time-stamp-custom-formats '("<%a %b %e %Y>" . "<%a %b %e %Y %H:%M>"))

(setq org-capture-templates
      `(
	("A"
	 "Agenda/Meeting" entry (file+headline "~/GitLab/PVBibliography/agenda.org" "Agenda")
	 "* %^{Title?} %^G\n:PROPERTIES:\n:Created: %U\n:END:\n\n%?"
	 :empty-lines 1  
	 :create t
	 )

	("K" "Log Time" entry (file+datetree "~/GitLab/PVBibliography/activity.org" "Activity")
	 "* %U - %^{Activity}  :TIME:"
	 )
	

	;;----------------
	
	("t"
	 "Todo" entry (file+olp+datetree ,my-todo-filename)
	 "* TODO %^{Title?} [/] %^G\n:PROPERTIES:\n:Created: %U\n:END:\n\n - [ ] %?"
	 :empty-lines 1  
	 :create t
	 )
	
	("T"
	 "Todo with file link" entry (file+olp+datetree ,my-todo-filename)
	 "* TODO %^{Title|%f} [/] %^G\n:PROPERTIES:\n:Created: %U\n:END:\n\nBack link: %a\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n - [ ] %?"
	 :empty-lines 1  
	 :create t
	 )
	
	("j" "Journal" entry (file+olp+datetree ,my-journal-filename)
	 "* %^{Title} %^G\n\n%?"
	 :empty-lines 1  
	 :create t
	 )
	("J" 
	 "Journal with file link" entry (file+olp+datetree ,my-journal-filename)
	 "* %^{Title|%f} %^G\n\nBack link: %a\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?"
	 :empty-lines 1  
	 :create t
	 )
	;;
	;; See: https://github.com/sprig/org-capture-extension for further details
	;;
	("L" 
	 "Protocol Link" entry (file ,my-www-links-filename)
	 "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] \
		%^G\n:PROPERTIES:\n:Created: %U\n:END:\n\n%?"
	 :empty-lines 1  
	 :create t
	 )
	
	("p" 
	 "Protocol" entry (file ,my-www-links-filename)
	 "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] \
		 %^G\n:PROPERTIES:\n:Created: %U\n:END:\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?"
	 :empty-lines 1  
	 :create t
	 )
	))
(setq my-bibtex-filename 
      (concat my-project-root "bibliography/bibliography.bib"))
(if (file-exists-p my-bibtex-filename)
    ;; If bibliography.bib exists 
    (setq reftex-default-bibliography  `(,my-bibtex-filename)
	  bibtex-completion-notes-extension "-notes.org"
	  bibtex-completion-notes-template-multiple-files "#+CALL: Setup()\n#+TITLE: ${author-or-editor} (${year}): ${title}\n\n* Personal Notes\n  :PROPERTIES:\n  :NOTER_DOCUMENT: ~/AnnotatedPDF/${=key=}.pdf\n  :END:\n\n[[file:~/AnnotatedPDF/${=key=}.pdf][${title}]]\n"
	  bibtex-completion-bibliography my-bibtex-filename
	  bibtex-completion-library-path (file-name-directory my-bibtex-filename)
	  bibtex-completion-notes-path (file-name-directory my-bibtex-filename)
	  
	  org-ref-default-bibliography  `(,my-bibtex-filename)
	  org-ref-pdf-directory (file-name-directory my-bibtex-filename)
	  )
  ;; otherwise unbound meaningless my-bibtex-filename
  (makunbound 'my-bibtex-filename)
  )
;; defines how to generate the pdf file using lualatex + biber
(setq org-latex-pdf-process
      '("lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	"biber %b"
	"lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	"lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/setup/library-of-babel.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
#+NAME: Setup
#+BEGIN_SRC emacs-lisp :results drawer
(concat 
 "#+OPTIONS: H:3 toc:t num:t \\n:nil ::t |:t ^:{} -:t f:t *:t tex:t d:t tags:not-in-toc \n"

 "#+PROPERTY: header-args :mkdirp yes \n"

 "#+HTML_HEAD_EXTRA: <style type=\"text/css\"> blockquote {background:#EEEEEE; padding: 3px 13px}    </style> \n"
 "#+HTML_HEAD_EXTRA: <style type=\"text/css\"> pre {background:#EEEEEE; padding: 3px 13px}    </style> \n"

 "#+LATEX_HEADER: \\usepackage[backend=biber, bibencoding=utf8 ]{biblatex}\n" 
 "#+LATEX_HEADER: \\usepackage{verbatim}\n" 
 "#+LATEX_HEADER: \\usepackage{minted}\n"
 "#+LATEX_HEADER: \\hypersetup{colorlinks=true}\n"
 "#+LATEX_HEADER: \\addbibresource{" my-project-root "bibliography/bibliography.bib}\n"

 "#+BEGIN_EXPORT latex \n"
 "% from: https://github.com/SublimeText/LaTeXTools/issues/657#issuecomment-188188632 \n"
 "\\renewcommand{\\MintedPygmentize}{/usr/bin/pygmentize} \n"
 "\\definecolor{bg}{rgb}{0.95,0.95,0.95} \n"
 "\\setminted{bgcolor=bg} \n"
 "\\setminted{fontsize=\\footnotesize}   \n"
 "\\setminted{breaklines} \n"
 "\\setminted{breakautoindent=false} \n"
 "\\setminted{mathescape} \n"
 "\\setminted{xleftmargin=0pt} \n"
 "#+END_EXPORT \n"
 )
#+END_SRC
#+NAME: Bibliography
#+BEGIN_SRC emacs-lisp :results drawer
(concat "#+BEGIN_EXPORT latex\n\\printbibliography\n"
	"\\begin{comment}\n#+END_EXPORT\n"
	"bibliography:" my-project-root "bibliography/bibliography.bib\n"
	"#+BEGIN_EXPORT latex\n\\end{comment}\n#+END_EXPORT\n")
#+END_SRC
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/setup/index_preamble.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
#+TITLE: My_Project_Name

# add what you want
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#############################
# Creates biblio dir & file #
#############################

echo "Creates directory $project_dir/bibliography" 
mkdir -p "$project_dir/bibliography"

#----------------

current_file="$project_dir/bibliography/bibliography.bib"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
@book{dominik16_org_mode_ref_manual,
  author =	 {Dominik, C.},
  title =	 {ORG MODE 9 REF MANUAL},
  year =	 2016,
  publisher =	 {ARTPOWER International PUB},
  isbn =	 9789888406852,
}

@Book{lewis00_gnu_emacs_lisp,
  author =	 {Lewis, Bil},
  title =	 {The GNU Emacs Lisp reference manual : for Emacs
                  Version 21, Revision 2.6, May 2000},
  year =	 2000,
  publisher =	 {Free Software Foundation},
  address =	 {Boston, MA},
  isbn =	 {978-1882114733},
}
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

##############################################
# Creates remaining files (index_preamble.org, ...) #
##############################################


#----------------

current_file="$project_dir/theindex.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
#+CALL: Setup()
#+TITLE: Index
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ./index.html

#+INCLUDE: "theindex.inc"
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/todo.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
#+CALL: Setup()
#+TITLE: TODO list 
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ./index.html
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/journal.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
#+CALL: Setup()
#+TITLE: Journal
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ./index.html
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/www_links.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
#+CALL: Setup()
#+TITLE: External web links
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ./index.html
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

########################
# Creates example file #
########################

echo "Creates directory $project_dir/example" 
mkdir -p "$project_dir/example"

#----------------

current_file="$project_dir/example/example.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
#+CALL: Setup()
#+TITLE: One example file
#+HTML_LINK_UP: ../index.html
#+HTML_LINK_HOME: ../index.html
* A code block example 
  #+BEGIN_SRC cpp 
#include <iostream>
int main()
{
  std::cout << "Hello world!" << std:endl;
  return 0;
}
  #+END_SRC

* A bibliographic reference
  Test bibliography: cite:lewis00_gnu_emacs_lisp
* Another section

  # put the bibliography here
  #+CALL: Bibliography()
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi
