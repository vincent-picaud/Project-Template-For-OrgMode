#!/bin/bash
#################
# Parse command #
#################

set -e

error=0
force=0
project_dir=""

while [ "$1" != "" ]; do
    case $1 in
        -f )       force=1
		   ;;
	-* )       error=1
                   ;;
        * )       if [ "$project_dir" == "" ]; then 
		      project_dir=$1 
		  else 
		      error=1 
		  fi 
    esac
    shift
done

if [ $error == 1 ]; then
    echo "Usage: $(basename $0) project_dir -f"
    echo ""
    echo " Create a directory 'project_dir' and populate it with some configuration files"
    echo " By default never overwrite files, use -f to force overwriting"
    exit 0
fi

project_name=$(basename "$project_dir")

##########################
# Creates root directory #
##########################

echo "Creates directory $project_dir" 
mkdir -p "$project_dir"

#############################
# Creates setup dir & files #
#############################

echo "Creates directory $project_dir/Setup" 
mkdir -p "$project_dir/Setup"

#----------------

current_file="$project_dir/Setup/options.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
#+OPTIONS: H:3 toc:t num:t \n:nil ::t |:t ^:{} -:t f:t *:t tex:t d:t tags:not-in-toc
#+PROPERTY: header-args :comments link :mkdirp yes
#+HTML_HEAD_EXTRA: <style type="text/css"> blockquote {background:#EEEEEE; padding: 3px 13px}    </style>
#+HTML_HEAD_EXTRA: <style type="text/css"> pre {background:#EEEEEE; padding: 3px 13px}    </style>

# Listing and bibliography config 
#+LATEX_HEADER: \usepackage{minted}    
#+LATEX_HEADER: \usepackage{fontspec}
#+LATEX_HEADER: \setmonofont{DejaVu Sans Mono}[Scale=MatchLowercase]
# verbatim provides "comment" env. (use with bibliography to skip some Org exported code)
#+LATEX_HEADER: \usepackage{verbatim} 
#+LATEX_HEADER: \usepackage[backend=biber, bibencoding=utf8 ]{biblatex}
#+LATEX_HEADER: \hypersetup{colorlinks=true}
#+LATEX_HEADER: \addbibresource{Bibliography/bibliography.bib}
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/Setup/setupFile.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
#+SETUPFILE: options.org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://orgmode.org/worg/style/worg.css"/>
#+HTML_HEAD: <style type="text/css">body{ max-width:80%; }</style>
#+INFOJS_OPT: view:showall mouse:underline path:http://orgmode.org/org-info.js home:index.html
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/Setup/setupFile-1.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
#+SETUPFILE: options.org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://orgmode.org/worg/style/worg.css"/>
#+HTML_HEAD: <style type="text/css">body{ max-width:80%; }</style>
#+INFOJS_OPT: view:showall mouse:underline path:http://orgmode.org/org-info.js home:../index.html
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/Setup/setupFile-2.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
#+SETUPFILE: options.org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://orgmode.org/worg/style/worg.css"/>
#+HTML_HEAD: <style type="text/css">body{ max-width:80%; }</style>
#+INFOJS_OPT: view:showall mouse:underline path:http://orgmode.org/org-info.js home:../../index.html
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/Setup/setupFile-3.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
#+SETUPFILE: options.org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://orgmode.org/worg/style/worg.css"/>
#+HTML_HEAD: <style type="text/css">body{ max-width:80%; }</style>
#+INFOJS_OPT: view:showall mouse:underline path:http://orgmode.org/org-info.js home:../../../index.html
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/Setup/setupFile-4.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
#+SETUPFILE: options.org
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://orgmode.org/worg/style/worg.css"/>
#+HTML_HEAD: <style type="text/css">body{ max-width:80%; }</style>
#+INFOJS_OPT: view:showall mouse:underline path:http://orgmode.org/org-info.js home:../../../../index.html
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/Setup/setupFile.el"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
(if my-project-root
    ;; Configuration
    (progn
      (message "Configuring %s " my-project-root)
      ;;
      ;; PDF Export config 
      ;;
      (setq org-image-actual-width (/ (display-pixel-width) 4))

      ;; uses the minted package instead of the listings one
      (setq org-latex-listings 'minted)
      
      ;; defines how to generate the pdf file using lualatex + biber
      (setq org-latex-pdf-process
      '("lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
      "biber %b"
      "lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
      "lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
      ;;
      ;; Working Bibliography with HTML export requires ox-bibtex
      ;;
      (require 'ox-bibtex)
      ;;
      ;; Local bibliography
      ;;
      (setq my-bibtex-filename 
	    (concat my-project-root "Bibliography/bibliography.bib"))
      (if (file-exists-p my-bibtex-filename)
	  ;; If bibliography.bib exists 
	  (setq reftex-default-bibliography  `(,my-bibtex-filename)
	        bibtex-completion-notes-extension "-notes.org"
		bibtex-completion-notes-template-multiple-files "#+SETUPFILE: ../Setup/setupFile-1.org\n#+TITLE: Notes on: ${author-or-editor} (${year}): ${title}\n#+INTERLEAVE_PDF: ${=key=}.pdf\n\n* Personal Notes\n"

		bibtex-completion-bibliography my-bibtex-filename
		bibtex-completion-library-path (file-name-directory my-bibtex-filename)
		bibtex-completion-notes-path (file-name-directory my-bibtex-filename)
		
		org-ref-default-bibliography  `(,my-bibtex-filename)
		org-ref-pdf-directory (file-name-directory my-bibtex-filename)
	  )
	;; otherwise unbound meaningless my-bibtex-filename
	(makunbound 'my-bibtex-filename)
    )
      ;;
      ;; Agenda files
      ;;
      (setq org-agenda-files
	    (mapcar 'abbreviate-file-name
		    (split-string
		     (shell-command-to-string (format "find %s -name \"*.org\" ! -name \"index.org\"  ! -path \"./Setup/*\"" my-project-root))
		     "\n")))
      ;;
      ;; My my-workInProgress-filename and its associated captures
      ;;
      (setq my-workInProgress-filename (concat my-project-root "workInProgress.org"))

      (when (file-exists-p my-workInProgress-filename)
	(setq org-capture-templates
	      `(
	      ;; Personal template (adapt them for your setting)
	      ;; ("A"
	      ;;  "Agenda/Meeting" entry (file+headline "~/GitLab/PVBibliography/agenda.org" "Agenda")
	      ;; "* %^{Title?} %^G\n:PROPERTIES:\n:Created: %U\n:END:\n\n %?"
	      ;; :empty-lines 1  
	      ;; :create t
	      ;; )
	      ;;
	      ;; ("K" "Log Time" entry (file+datetree "~/GitLab/PVBibliography/activity.org" "Activity")
	      ;; "* %U - %^{Activity}  :TIME:"
	      ;; )
	      
	      ("t"
		 "Todo" entry (file+headline ,my-workInProgress-filename "Project TODO")
		 "* TODO %^{Title?} [/] %^G\n:PROPERTIES:\n:Created: %U\n:END:\n\n - [ ] %?"
		 :empty-lines 1  
		 :create t
	      )
		
		("T"
		 "Todo with file link" entry (file+headline ,my-workInProgress-filename "Project TODO")
		 "* TODO %^{Title|%f} [/] %^G\n:PROPERTIES:\n:Created: \
		 %U\n:END:\n\n[[%l][In file %f]]:\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n - [ ] %?"
		 :empty-lines 1  
		 :create t
		)
		
		("j" "Journal" entry (file+olp+datetree ,my-workInProgress-filename "Project Journal")
		 "* %^{Title} %^G\n\n%?"
		 :empty-lines 1  
		 :create t
		)

		("J" 
		"Journal with file link" entry (file+olp+datetree ,my-workInProgress-filename "Project journal")
		 "* %^{Title|%f} %^G\n\n[[%l][In file %f]]:\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?"
		 :empty-lines 1  
		 :create t
		)
		;;
		;; See: https://github.com/sprig/org-capture-extension for further details
		;;
		("L" 
		"Protocol Link" entry (file+headline ,my-workInProgress-filename "W3 Links")
		"* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] \
		%^G\n:PROPERTIES:\n:Created: %U\n:END:\n\n%?"
		:empty-lines 1  
		:create t
		)
		
		("p" 
		"Protocol" entry (file+headline ,my-workInProgress-filename "W3 Links")
		 "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] \
		 %^G\n:PROPERTIES:\n:Created: %U\n:END:\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?"
		 :empty-lines 1  
		 :create t
		)
		)))
      ;;
      ;; You can publish in another place:
      ;;
      ;; (setq my-publish-dir "~/Temp/Publish")
      ;;
      ;; by default we publish in-place 
      ;; (advantage: C-c C-e h h directly update the published page)
      (setq my-publish-dir my-project-root)

      (setq my-project-name "My_Project_Name")
   
      (defun my-org-publish-sitemap (title list)
	"Create my own index.org instead of the default one"
	(concat	"#+INCLUDE: \"index_preamble.org\"\n"
		"#+OPTIONS: toc:nil\n\n"
		"* Sitemap\n\n"
		(org-list-to-org list)
		"\n\n"))
  
      (setq org-publish-project-alist
	    `(
	      (,(concat my-project-name "_Org")
	       :base-directory ,my-project-root
	       :base-extension "org"
	       :recursive t
	       :publishing-directory ,my-publish-dir
	       :publishing-function org-html-publish-to-html
	       :sitemap-function my-org-publish-sitemap
	       :htmlize-source t
	       :org-html-head-include-default-style nil
	       :exclude "Setup*\\|index_preamble.org" 
	       ;; Generates theindex.org + inc files
	       :makeindex t
	       ;; Creates index.org, calls my-org-publish-sitemap to fill it
	       :auto-sitemap t
	       :sitemap-filename "index.org"
	      )

	      ;; (,(concat my-project-name "_Tangle")
	      ;;  :base-directory ,my-project-root
	      ;;  :base-extension "org"
	      ;;  :recursive t
	      ;;  :publishing-directory ,my-publish-dir
	      ;;  :publishing-function org-babel-tangle-publish
	      ;;  :exclude ".*bazel-.*"
	      ;;  )

	      (,(concat my-project-name "_Data")
	       :base-directory ,my-project-root
	       :base-extension "nb\\|?pp\\|png"
	       :recursive t
	       :publishing-directory ,my-publish-dir
	       :publishing-function org-publish-attachment
	       :exclude ".*bazel-.*"
	      )

	      ;; Main
	      (,my-project-name
	       :components (,(concat my-project-name "_Org")
	                    ;; ,(concat my-project-name "_Tangle")
			    ,(concat my-project-name "_Data"))
	      )
	      )
	)
      ) ; progn
  ;; else
  (error "Project root undefined")
    )
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#############################
# Creates biblio dir & file #
#############################

echo "Creates directory $project_dir/Bibliography" 
mkdir -p "$project_dir/Bibliography"

#----------------

current_file="$project_dir/Bibliography/bibliography.bib"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
@book{dominik16_org_mode_ref_manual,
  author =	 {Dominik, C.},
  title =	 {ORG MODE 9 REF MANUAL},
  year =	 2016,
  publisher =	 {ARTPOWER International PUB},
  url =		 {https://books.google.fr/books?id=E4kLMQAACAAJ},
  isbn =	 9789888406852,
}
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

##############################################
# Creates remaining files (index_preamble.org, ...) #
##############################################

current_file="$project_dir/index_preamble.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
#+SETUPFILE: ./Setup/setupFile.org
#+TITLE: My_Project_Name

* Introduction

This is your project sitemap, you can put here anything you want.
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/theindex.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
#+SETUPFILE: ./Setup/setupFile.org
#+TITLE: My_Project_Name Index

* Index 
#+INCLUDE: "theindex.inc"
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/page_example.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
#+SETUPFILE: ./Setup/setupFile.org
#+TITLE: Example page

#+BEGIN_EXPORT latex
\definecolor{bg}{rgb}{0.95,0.95,0.95}
\setminted[]{
  bgcolor=bg,
  breaklines=true,
  breakanywhere=true,
  mathescape,
  fontsize=\footnotesize}
#+END_EXPORT

* A section

#+BEGIN_SRC c++
class Foo {
};

int foo() {
  return 0
}
#+END_SRC

A bibliographical reference: cite:dominik16_org_mode_ref_manual

* Bibliography

#+BEGIN_EXPORT latex
\printbibliography
#+END_EXPORT

#+BEGIN_EXPORT latex
\begin{comment}
#+END_EXPORT
# Important: the limit:t option limits bib to cited documents
#+BIBLIOGRAPHY: ./Bibliography/bibliography plain limit:t
#+BEGIN_EXPORT latex
\end{comment}
#+END_EXPORT
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi
#----------------

current_file="$project_dir/.dir-locals.el"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
;; Must exist because this file is used to find my-project-root
;;
;; Here contains nothing (), however you can fill it with
;; your usual stuff.
()
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/workInProgress.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
#+SETUPFILE: Setup/setupFile.org
#+TITLE: Work in Progress

* Project Journal
* Project TODO
* W3 Links
#+INDEX: W3 link!An index example
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi
