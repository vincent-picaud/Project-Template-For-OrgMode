#+SETUPFILE: ./setup/setup.org
#+TITLE: Org Emacs Project Template

* Table of contents                                          :TOC_5:noexport:
- [[#what-is-it][What is it?]]
  - [[#features][Features]]
- [[#quick-starter][Quick starter]]
  - [[#emacs-initel-configuration][Emacs =init.el= configuration]]
    - [[#required-packages][Required packages]]
    - [[#my-new-project-configuration-function][=my-new-project-configuration= function]]
    - [[#extra-configuration-functions][Extra configuration functions]]
    - [[#complete-listing][Complete listing]]
  - [[#new-project-creation][New project creation]]
- [[#project-structure][Project structure]]
  - [[#setup][=setup/=]]
    - [[#setupoptionsorg][=setup/options.org=]]
    - [[#setupel][=setup.el=]]
      - [[#bibliography-integration][Bibliography integration]]
      - [[#complete-setupel-file][Complete =setup.el= file]]
  - [[#bibliography][=bibliography/=]]
    - [[#bibliographybib][=bibliography.bib=]]
    - [[#setupel-update][=setup.el= update]]
  - [[#example][=example/=]]
    - [[#exampleexampleorg][=example/example.org=]]
      - [[#setup-header][Setup header]]
      - [[#code-block-example][Code block example]]
      - [[#bibliographic-reference-example][Bibliographic reference example]]
    - [[#the-complete-exampleorg-file][The complete =example.org= file]]

* What is it?

  Defines a =create_orgMode_project= bash script to quickly generate an OrgMode project structure.

  #+BEGIN_SRC bash :eval never
createOrgProject MyProject
  #+END_SRC

** Features

   The framework provides some functionalities like:

   - org publish configuration 
   - bibliography file with its configuration 
   - pdf export configuration luaTeX + biber + minted (utf8 support)
   - org templates (also org protocol) configuration 

* Quick starter

** Emacs =init.el= configuration

   To use the project (template) simply run this code. 

   *Note:* if you want to use this configure in a regular basis, simply add
   this function to your Emacs =init.el=

*** Required packages
    #+HEADER: :noweb-ref my-new-project-configuration
    #+BEGIN_SRC emacs-lisp :exports code
(require 'project)
(require 'org-ref)
(require 'htmlize)
    #+END_SRC

*** =my-new-project-configuration= function

    #+HEADER: :noweb-ref my-new-project-configuration
    #+BEGIN_SRC emacs-lisp :exports code

(defun my-new-project-configuration ()
  "Sets my-project-root as root project directory and load
my-project-root/setup/setup.el project configuration file "
  (interactive)
  (setq my-project-root (car (project-roots (project-current))))

  (if my-project-root
      (let ((my-project-setup-file (concat my-project-root "setup/setup.el")))
	(if (file-exists-p my-project-setup-file)
	    (load my-project-setup-file nil t t nil)
	  (error "Project %s setup file not found" my-project-setup-file)))
    (error "Project root dir not found (missing .git ?)")))
    #+END_SRC


    Its role is to found the project root (= the directory containing the
    .git directory) and to load the project configuration
    =Setup/setupFile.el=.

*** TODO Extra configuration functions

    - [ ] replace this part by a setup/babel.org file + babel ingest 

      #+HEADER: :noweb-ref my-new-project-configuration
      #+BEGIN_SRC emacs-lisp :exports code

(defun my-new-project-setupfile ()
  "Returns #+SETUPFILE: .../setup/setup.org"
  (concat "#+SETUPFILE: "
	  (expand-file-name (car (project-roots (project-current)))) "setup/setup.org"))
      #+END_SRC

*** Complete listing 
 
    #+BEGIN_SRC emacs-lisp :exports code :noweb yes
<<my-new-project-configuration>>
    #+END_SRC

    #+RESULTS:
    : my-new-project-setupfile

** New project creation 

   Use the provided shell script:

   #+BEGIN_SRC bash :eval never
createorgproject MyProject
   #+END_SRC

   Please note that by default, this script will *never* overwrite
   anything. If to want to overwrite, use the =-f= option.

   *Important:* if you just created a fresh new project be sure that there
   is a =.git= directory as it is used to locate the project root. If you
   simply want to do a quick test you can do
   #+BEGIN_SRC bash :eval never
cd MyProject
echo >> .git
   #+END_SRC
   as an alternative.

   Once that the script has been run you can use Emacs as usual:
   #+BEGIN_SRC bash :eval never
emacs MyProject/page_example.org &
   #+END_SRC

   Then load your project configuration *M-x my-new-project-configuration*

   Then you can do whatever you want, for instance publish your project
   with *C-c C-e P p* and visit the generated pages:
   #+BEGIN_SRC bash :eval never
firefox  MyProject/index.html
   #+END_SRC

   *Note:* you can also try *C-c C-e l o* to check PDF exports.

* Project structure
  :PROPERTIES:
  #  :header-args: :tangle-mode (identity #o444) :mkdirp yes
  :header-args: :mkdirp yes
  :END:
** =setup/=
   #+INDEX:directory!setup

   This directory contains the configuration.

*** =setup/options.org= 
    #+INDEX: file!setup/options.org
 

    This are the org mode options:

    #+HEADER: :noweb-ref setup/options.org
    #+BEGIN_SRC emacs-lisp 
,#+OPTIONS: H:3 toc:t num:t \n:nil ::t |:t ^:{} -:t f:t *:t tex:t d:t tags:not-in-toc
,#+PROPERTY: header-args :mkdirp yes
    #+END_SRC

    This allows gray background
    #+HEADER: :noweb-ref setup/options.org
    #+BEGIN_SRC emacs-lisp 
,#+HTML_HEAD_EXTRA: <style type="text/css"> blockquote {background:#EEEEEE; padding: 3px 13px}    </style>
,#+HTML_HEAD_EXTRA: <style type="text/css"> pre {background:#EEEEEE; padding: 3px 13px}    </style>
    #+END_SRC

    The complete =option.org= file is:

    #+BEGIN_SRC emacs-lisp :exports code :noweb yes :tangle yes :tangle setup/options.org
<<setup/options.org>>
    #+END_SRC

    
*** =setup.el= 
    :PROPERTIES:
    :ID:       dfcaca1b-a2db-4418-98d3-594593933cb7
    :END:
    #+INDEX: file!setup/setup.el

    This file contains code executed by the =my-new-project-configuration=
    function. At this point there is only one variable =my-project-root=
    containing the project root.

    Print a message 
    #+HEADER: :noweb-ref setup/setup.el
    #+BEGIN_SRC emacs-lisp
(message (format "Configuring %s" my-project-root))
    #+END_SRC


    The first task is to define how to publish the project:

    #+HEADER: :noweb-ref setup/setup.el
    #+BEGIN_SRC emacs-lisp
(setq my-publish-dir (concat my-project-root "doc"))

(defun my-org-publish-sitemap (title list)
  "Create my own index.org instead of the default one"
  (concat	"#+INCLUDE: \"setup/index_preamble.org\"\n"
		"#+OPTIONS: toc:nil\n\n"
		"#+TITLE: "
		title
		"\n"
		"* My Sitemap\n\n"
		(org-list-to-org list)
		"\n\n"))

(setq org-publish-project-alist
      `(
	("my-project-org-files",
	 :base-directory ,my-project-root
	 :base-extension "org"
	 :recursive t
	 :publishing-directory ,my-publish-dir
	 :publishing-function org-html-publish-to-html
	 :sitemap-function my-org-publish-sitemap
	 :htmlize-source t
					;	 :org-html-head-include-default-style nil
	 :exclude "setup/*"
	 ;; Generates theindex.org + inc files
	 :makeindex t
	 ;; Creates index.org, calls my-org-publish-sitemap to fill it
	 :auto-sitemap t
	 :sitemap-filename "index.org"
	 )

	("my-project-data-files",
	 :base-directory ,my-project-root
	 :base-extension "nb\\|?pp\\|png"
	 :recursive t
	 :publishing-directory ,my-publish-dir
	 :publishing-function org-publish-attachment
	 :exclude ".*bazel-.*"
	 )

	;; Main
	("my-project",
	 :components ("my-project-org-files" "my-project-data-files")
	 )
	)
      )
    #+END_SRC

    Then we use the =find= command to feed the =org-agenda-files= variable:

    #+HEADER: :noweb-ref setup/setup.el
    #+BEGIN_SRC emacs-lisp
(setq org-agenda-files
      (split-string
       (shell-command-to-string (format "cd %s; find -name '*.org' ! -name 'index.org'  ! -name 'agenda.org'  ! -name '.#*' ! -path './setup/*'" my-project-root))
       ))
    #+END_SRC

**** Bibliography integration

     See [[id:591df7a7-1832-492b-8102-a8fa7aeb9b04][=setup.el= update]]

**** Complete =setup.el= file 

     #+BEGIN_SRC emacs-lisp :exports code :noweb yes :tangle yes :tangle setup/setup.el
(if my-project-root
    ;; Configuration
    (progn
      <<setup/setup.el>>
      )
  )
     #+END_SRC


** =bibliography/=

   This directory contains the [[id:377d8ec4-3d02-4ddf-8fca-6c816afe2b15][=bibliography.bib=]] file. 

*** =bibliography.bib=
    :PROPERTIES:
    :ID:       377d8ec4-3d02-4ddf-8fca-6c816afe2b15
    :END:
    #+INDEX:file!bibliography.bib 

    To be used as example here is our =bibliography.bib= example file. I
    found convenient to provide a directory and not only the
    =bibliography.bib= as I can annotate my reference here.

    #+BEGIN_SRC bib :mkdir yes :tangle yes :tangle bibliography/bibliography.bib 
@book{dominik16_org_mode_ref_manual,
  author =	 {Dominik, C.},
  title =	 {ORG MODE 9 REF MANUAL},
  year =	 2016,
  publisher =	 {ARTPOWER International PUB},
  isbn =	 9789888406852,
}

@Book{lewis00_gnu_emacs_lisp,
  author =	 {Lewis, Bil},
  title =	 {The GNU Emacs Lisp reference manual : for Emacs
                  Version 21, Revision 2.6, May 2000},
  year =	 2000,
  publisher =	 {Free Software Foundation},
  address =	 {Boston, MA},
  isbn =	 {978-1882114733},
}
    #+END_SRC

*** =setup.el= update
    :PROPERTIES:
    :ID:       591df7a7-1832-492b-8102-a8fa7aeb9b04
    :END:
    If you want to be able to html-export bibliography one must update =setup.el= with 

    #+HEADER: :noweb-ref setup/setup.el
    #+BEGIN_SRC emacs-lisp

;; bibliography html-export
;;(require 'ox-bibtex)
    #+END_SRC

    See: [[id:dfcaca1b-a2db-4418-98d3-594593933cb7][=setup.el=]]

** =example/=
   #+INDEX:directory!example

*** =example/example.org=
    #+INDEX:file:example/example.org

    This is a page demo to check it works.

**** TODO Setup header

     To be properly configured the org mode file can begin as follows:

     #+HEADER: :noweb-ref example/example.org
     #+BEGIN_SRC org 
src_emacs-lisp[:results raw]{(my-new-project-setupfile)}
,#+TITLE: Example 
     #+END_SRC
     
     For explanations:
     https://emacs.stackexchange.com/q/58633/13563. 

     - [ ] another possibility is to use yasnippet


**** Code block example

     We then add a code block to see that background is gray colored

     #+HEADER: :noweb-ref example/example.org
     #+BEGIN_SRC org 
,* A code block example 
  ,#+BEGIN_SRC cpp 
#include <iostream>
int main()
{
  std::cout << "Hello world!" << std:endl;
  return 0;
}
  ,#+END_SRC

     #+END_SRC


**** Bibliographic reference example

     Then we check that bibliography integration works

     #+HEADER: :noweb-ref example/example.org
     #+BEGIN_SRC org 
,* A bibliographic reference
  Test bibliography: cite:lewis00_gnu_emacs_lisp

,* The bibliography
  ,#+BIBLIOGRAPHY: ../bibliography/bibliography plain limit:t
     #+END_SRC

*** The complete =example.org= file 
   
    #+BEGIN_SRC org :exports code :noweb yes :tangle yes :tangle example/example.org
<<example/example.org>>
    #+END_SRC

* ~create_orgMode_project~ script (old)                              :noexport:





  #+BEGIN_SRC bash :tangle yes :tangle create_orgMode_project :shebang "#!/bin/bash" :exports none :eval never

#################
# Parse command #
#################

set -e

error=0
force=0
project_dir=""

while [ "$1" != "" ]; do
    case $1 in
        -f )       force=1
		   ;;
	-* )       error=1
                   ;;
        ,* )       if [ "$project_dir" == "" ]; then 
		      project_dir=$1 
		  else 
		      error=1 
		  fi 
    esac
    shift
done

if [ $error == 1 ]; then
    echo "Usage: $(basename $0) project_dir -f"
    echo ""
    echo " Create a directory 'project_dir' and populate it with some configuration files"
    echo " By default never overwrite files, use -f to force overwriting"
    exit 0
fi

project_name=$(basename "$project_dir")

##########################
# Creates root directory #
##########################

echo "Creates directory $project_dir" 
mkdir -p "$project_dir"

#############################
# Creates setup dir & files #
#############################

echo "Creates directory $project_dir/Setup" 
mkdir -p "$project_dir/Setup"

#----------------

current_file="$project_dir/Setup/options.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
,#+OPTIONS: H:3 toc:t num:t \n:nil ::t |:t ^:{} -:t f:t *:t tex:t d:t tags:not-in-toc
,#+PROPERTY: header-args :mkdirp yes
,#+HTML_HEAD_EXTRA: <style type="text/css"> blockquote {background:#EEEEEE; padding: 3px 13px}    </style>
,#+HTML_HEAD_EXTRA: <style type="text/css"> pre {background:#EEEEEE; padding: 3px 13px}    </style>

# Listing and bibliography config 
,#+LATEX_HEADER: \usepackage{minted}    
,#+LATEX_HEADER: \usepackage{fontspec}
,#+LATEX_HEADER: \setmonofont{DejaVu Sans Mono}[Scale=MatchLowercase]
# verbatim provides "comment" env. (use with bibliography to skip some Org exported code)
,#+LATEX_HEADER: \usepackage{verbatim} 
,#+LATEX_HEADER: \usepackage[backend=biber, bibencoding=utf8 ]{biblatex}
,#+LATEX_HEADER: \hypersetup{colorlinks=true}
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/Setup/setupFile.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
,#+SETUPFILE: options.org
,#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://orgmode.org/worg/style/worg.css"/>
,#+HTML_HEAD: <style type="text/css">body{ max-width:80%; }</style>
,#+INFOJS_OPT: view:showall mouse:underline path:http://orgmode.org/org-info.js home:index.html
,#+LATEX_HEADER: \addbibresource{Bibliography/bibliography.bib}
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/Setup/setupFile-1.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
,#+SETUPFILE: options.org
,#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://orgmode.org/worg/style/worg.css"/>
,#+HTML_HEAD: <style type="text/css">body{ max-width:80%; }</style>
,#+INFOJS_OPT: view:showall mouse:underline path:http://orgmode.org/org-info.js home:../index.html
,#+LATEX_HEADER: \addbibresource{../Bibliography/bibliography.bib}
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/Setup/setupFile-2.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
,#+SETUPFILE: options.org
,#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://orgmode.org/worg/style/worg.css"/>
,#+HTML_HEAD: <style type="text/css">body{ max-width:80%; }</style>
,#+INFOJS_OPT: view:showall mouse:underline path:http://orgmode.org/org-info.js home:../../index.html
,#+LATEX_HEADER: \addbibresource{../../Bibliography/bibliography.bib}
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/Setup/setupFile-3.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
,#+SETUPFILE: options.org
,#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://orgmode.org/worg/style/worg.css"/>
,#+HTML_HEAD: <style type="text/css">body{ max-width:80%; }</style>
,#+INFOJS_OPT: view:showall mouse:underline path:http://orgmode.org/org-info.js home:../../../index.html
,#+LATEX_HEADER: \addbibresource{../../../Bibliography/bibliography.bib}
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/Setup/setupFile-4.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
,#+SETUPFILE: options.org
,#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://orgmode.org/worg/style/worg.css"/>
,#+HTML_HEAD: <style type="text/css">body{ max-width:80%; }</style>
,#+INFOJS_OPT: view:showall mouse:underline path:http://orgmode.org/org-info.js home:../../../../index.html
,#+LATEX_HEADER: \addbibresource{../../../../Bibliography/bibliography.bib}
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/Setup/setupFile.el"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
(if my-project-root
    ;; Configuration
    (progn
      (message "Configuring %s " my-project-root)
      ;;
      ;; PDF Export config 
      ;;
      (setq org-image-actual-width (/ (display-pixel-width) 4))

      ;; uses the minted package instead of the listings one
      (setq org-latex-listings 'minted)
      
      ;; defines how to generate the pdf file using lualatex + biber
      (setq org-latex-pdf-process
      '("lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
      "biber %b"
      "lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
      "lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
      ;;
      ;; Working Bibliography with HTML export requires ox-bibtex
      ;;
      (require 'ox-bibtex)
      ;;
      ;; Local bibliography
      ;;
      (setq my-bibtex-filename 
	    (concat my-project-root "Bibliography/bibliography.bib"))
      (if (file-exists-p my-bibtex-filename)
	  ;; If bibliography.bib exists 
	  (setq reftex-default-bibliography  `(,my-bibtex-filename)
	        bibtex-completion-notes-extension "-notes.org"
		bibtex-completion-notes-template-multiple-files "#+SETUPFILE: ../Setup/setupFile-1.org\n#+TITLE: ${author-or-editor} (${year}): ${title}\n\n* Personal Notes\n  :PROPERTIES:\n  :NOTER_DOCUMENT: ~/AnnotatedPDF/${=key=}.pdf\n  :END:\n\n[[file:~/AnnotatedPDF/${=key=}.pdf][${title}]]\n"

		bibtex-completion-bibliography my-bibtex-filename
		bibtex-completion-library-path (file-name-directory my-bibtex-filename)
		bibtex-completion-notes-path (file-name-directory my-bibtex-filename)
		
		org-ref-default-bibliography  `(,my-bibtex-filename)
		org-ref-pdf-directory (file-name-directory my-bibtex-filename)
	  )
	;; otherwise unbound meaningless my-bibtex-filename
	(makunbound 'my-bibtex-filename)
    )
      ;;
      ;; Agenda files
      ;;
      (setq org-agenda-files
	    (mapcar 'abbreviate-file-name
		    (split-string
		     (shell-command-to-string (format "find %s -name \"*.org\" ! -name \"index.org\"  ! -name \"agenda.org\"  ! -path \"./Setup/*\"" my-project-root))
		     "\n")))
      ;;
      ;; My my-workInProgress-filename and its associated captures
      ;;
      (setq my-www-links-filename (concat my-project-root "www_links.org"))
      (setq my-journal-filename (concat my-project-root "journal.org"))
      (setq my-todo-filename (concat my-project-root "todo.org"))

      (setq org-capture-templates
      	      `(
	      ;; Personal template (adapt them for your setting)
	      ;; ("A"
	      ;;  "Agenda/Meeting" entry (file+headline "~/GitLab/PVBibliography/agenda.org" "Agenda")
	      ;; "* %^{Title?} %^G\n:PROPERTIES:\n:Created: %U\n:END:\n\n %?"
	      ;; :empty-lines 1  
	      ;; :create t
	      ;; )
	      ;;
	      ;; ("K" "Log Time" entry (file+datetree "~/GitLab/PVBibliography/activity.org" "Activity")
	      ;; "* %U - %^{Activity}  :TIME:"
	      ;; )

		("t"
		 "Todo" entry (file+olp+datetree ,my-todo-filename)
		 "* TODO %^{Title?} [/] %^G\n:PROPERTIES:\n:Created: %U\n:END:\n\n - [ ] %?"
		 :empty-lines 1  
		 :create t
		)
		
		("T"
		 "Todo with file link" entry (file+olp+datetree ,my-todo-filename)
		 "* TODO %^{Title|%f} [/] %^G\n:PROPERTIES:\n:Created: %U\n:END:\n\nBack link: %a\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n - [ ] %?"
		 :empty-lines 1  
		 :create t
		)
		
		("j" "Journal" entry (file+olp+datetree ,my-journal-filename)
		 "* %^{Title} %^G\n\n%?"
		 :empty-lines 1  
		 :create t
		)

		("J" 
		"Journal with file link" entry (file+olp+datetree ,my-journal-filename)
		 "* %^{Title|%f} %^G\n\nBack link: %a\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?"
		 :empty-lines 1  
		 :create t
		)

		;;
		;; See: https://github.com/sprig/org-capture-extension for further details
		;;
		("L" 
		"Protocol Link" entry (file ,my-www-links-filename)
		"* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] \
		%^G\n:PROPERTIES:\n:Created: %U\n:END:\n\n%?"
		:empty-lines 1  
		:create t
		)
		
		("p" 
		"Protocol" entry (file ,my-www-links-filename)
		 "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] \
		 %^G\n:PROPERTIES:\n:Created: %U\n:END:\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?"
		 :empty-lines 1  
		 :create t
		)
		))
      ;;
      ;; You can publish in another place:
      ;;
      ;; (setq my-publish-dir "~/Temp/Publish")
      ;;
      ;; by default we publish in-place 
      ;; (advantage: C-c C-e h h directly update the published page)
      (setq my-publish-dir my-project-root)

      (setq my-project-name "My_Project_Name")
   
      (defun my-org-publish-sitemap (title list)
	"Create my own index.org instead of the default one"
	(concat	"#+INCLUDE: \"index_preamble.org\"\n"
		"#+OPTIONS: toc:nil\n\n"
		"* Sitemap\n\n"
		(org-list-to-org list)
		"\n\n"))
  
      (setq org-publish-project-alist
	    `(
	      (,(concat my-project-name "_Org")
	       :base-directory ,my-project-root
	       :base-extension "org"
	       :recursive t
	       :publishing-directory ,my-publish-dir
	       :publishing-function org-html-publish-to-html
	       :sitemap-function my-org-publish-sitemap
	       :htmlize-source t
	       :org-html-head-include-default-style nil
	       :exclude "Setup*\\|index_preamble.org" 
	       ;; Generates theindex.org + inc files
	       :makeindex t
	       ;; Creates index.org, calls my-org-publish-sitemap to fill it
	       :auto-sitemap t
	       :sitemap-filename "index.org"
	      )

	      ;; (,(concat my-project-name "_Tangle")
	      ;;  :base-directory ,my-project-root
	      ;;  :base-extension "org"
	      ;;  :recursive t
	      ;;  :publishing-directory ,my-publish-dir
	      ;;  :publishing-function org-babel-tangle-publish
	      ;;  :exclude ".*bazel-.*"
	      ;;  )

	      (,(concat my-project-name "_Data")
	       :base-directory ,my-project-root
	       :base-extension "nb\\|?pp\\|png"
	       :recursive t
	       :publishing-directory ,my-publish-dir
	       :publishing-function org-publish-attachment
	       :exclude ".*bazel-.*"
	      )

	      ;; Main
	      (,my-project-name
	       :components (,(concat my-project-name "_Org")
	                    ;; ,(concat my-project-name "_Tangle")
			    ,(concat my-project-name "_Data"))
	      )
	      )
      )
      ) ; progn
  ;; else
  (error "Project root undefined")
    )
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#############################
# Creates biblio dir & file #
#############################

echo "Creates directory $project_dir/Bibliography" 
mkdir -p "$project_dir/Bibliography"

#----------------

current_file="$project_dir/Bibliography/bibliography.bib"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
@book{dominik16_org_mode_ref_manual,
  author =	 {Dominik, C.},
  title =	 {ORG MODE 9 REF MANUAL},
  year =	 2016,
  publisher =	 {ARTPOWER International PUB},
  url =		 {https://books.google.fr/books?id=E4kLMQAACAAJ},
  isbn =	 9789888406852,
}
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

##############################################
# Creates remaining files (index_preamble.org, ...) #
##############################################

current_file="$project_dir/index_preamble.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
,#+SETUPFILE: ./Setup/setupFile.org
,#+TITLE: My_Project_Name

,* Introduction

This is your project sitemap, you can put here anything you want.
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/theindex.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
,#+SETUPFILE: ./Setup/setupFile.org
,#+TITLE: My_Project_Name Index

,* Index 
,#+INCLUDE: "theindex.inc"
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/page_example.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
,#+SETUPFILE: ./Setup/setupFile.org
,#+TITLE: Example page

,#+BEGIN_EXPORT latex
\definecolor{bg}{rgb}{0.95,0.95,0.95}
\setminted[]{
  bgcolor=bg,
  breaklines=true,
  breakanywhere=true,
  mathescape,
  fontsize=\footnotesize}
,#+END_EXPORT

,* A section

,#+BEGIN_SRC c++
class Foo {
};

int foo() {
  return 0
}
,#+END_SRC

A bibliographical reference: cite:dominik16_org_mode_ref_manual

,* Bibliography

,#+BEGIN_EXPORT latex
\printbibliography
,#+END_EXPORT

,#+BEGIN_EXPORT latex
\begin{comment}
,#+END_EXPORT
# Important: the limit:t option limits bib to cited documents
,#+BIBLIOGRAPHY: ./Bibliography/bibliography plain limit:t
,#+BEGIN_EXPORT latex
\end{comment}
,#+END_EXPORT
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/todo.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
,#+SETUPFILE: Setup/setupFile.org
,#+TITLE: TODO list
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/journal.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
,#+SETUPFILE: Setup/setupFile.org
,#+TITLE: Journal
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/www_links.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
,#+SETUPFILE: Setup/setupFile.org
,#+TITLE: WWW links
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi
  #+END_SRC

  sav@saint-cantin-chaffauge.com
