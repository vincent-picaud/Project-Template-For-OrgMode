#+CALL: Setup()
#+TITLE: Org Emacs Project Template
#+HTML_LINK_UP: index.html
#+HTML_LINK_HOME: index.html

* Table of contents                                          :TOC_5:noexport:
- [[#what-is-it][What is it?]]
  - [[#features][Features]]
- [[#quick-starter][Quick starter]]
  - [[#emacs-initel-configuration][Emacs =init.el= configuration]]
    - [[#required-packages][Required packages]]
    - [[#my-new-project-configuration-function][=my-new-project-configuration= function]]
  - [[#new-project-creation][New project creation]]
- [[#project-structure][Project structure]]
  - [[#project-root][=project root=]]
    - [[#theindex_org][=theindex_org=]]
    - [[#todoorg][=todo.org=]]
    - [[#journalorg][=journal.org=]]
    - [[#www_linksorg][=www_links.org=]]
  - [[#setup][=setup/=]]
    - [[#setuplibrary-of-babelorg][=setup/library-of-babel.org=]]
      - [[#the-setup-command][The =Setup()= command]]
      - [[#the-bibliography-command][The =Bibliography()= command]]
    - [[#setupsetupel][=setup/setup.el=]]
      - [[#configuration-message][Configuration message]]
      - [[#use-minted-for-listings][Use =minted= for listings]]
      - [[#load-library-of-babelorg][Load =library-of-babel.org=]]
      - [[#org-publish-project-alist-definition][=org-publish-project-alist= definition]]
      - [[#feed-org-agenda-files-with-org-files][Feed =org-agenda-files= with org files]]
      - [[#some-captures-with-their-files][Some captures with their files]]
      - [[#org-ref-configuration][org-ref configuration]]
      - [[#pdf-generation][PDF generation]]
    - [[#setupindex_preambleorg][=setup/index_preamble.org=]]
  - [[#bibliography][=bibliography/=]]
    - [[#bibliographybib][=bibliography.bib=]]
  - [[#example][=example/=]]
    - [[#exampleexampleorg][=example/example.org=]]
      - [[#file-header][File header]]
      - [[#equation-example][Equation example]]
      - [[#code-block-example][Code block example]]
      - [[#bibliographic-reference-example][Bibliographic reference example]]

* What is it?

  Defines a =create_orgMode_project= bash script to quickly generate an OrgMode project structure.

  #+BEGIN_SRC bash :eval never
createOrgProject MyProject
  #+END_SRC

** Features

   The framework provides some functionalities like:

   - org publish configuration 
   - bibliography file with its configuration 
   - pdf export configuration luaTeX + biber + minted (utf8 support)
   - org templates (also org protocol) configuration 

* Quick starter

** Emacs =init.el= configuration

   To use the project (template) simply run this code. 

   *Note:* if you want to use this configure in a regular basis, simply add
   this function to your Emacs =init.el=

*** Required packages

    #+HEADER: :noweb-ref my-new-project-configuration
    #+BEGIN_SRC emacs-lisp :exports code
(require 'project)
(require 'org-ref)
(require 'htmlize)
    #+END_SRC

    #+RESULTS:
    : htmlize

*** =my-new-project-configuration= function

    #+HEADER: :noweb-ref my-new-project-configuration :exports code 
    #+BEGIN_SRC emacs-lisp :exports code
(defun my-new-project-configuration ()
  "Sets my-project-root as root project directory and load
my-project-root/setup/setup.el project configuration file "
  (interactive)
  (setq my-project-root (expand-file-name (car (project-roots (project-current)))))

  (if my-project-root
      (let ((my-project-setup-file (concat my-project-root "setup/setup.el")))
	(if (file-exists-p my-project-setup-file)
	    (load my-project-setup-file nil t t nil)
	  (error "Project %s setup file not found" my-project-setup-file)))
    (error "Project root dir not found (missing .git ?)")))
    #+END_SRC

    #+RESULTS:
    : my-new-project-configuration

    Its role is to found the project root (= the directory containing the
    .git directory) and to load the project configuration
    =setup/setup.el=.

** New project creation 

   Use the provided shell script:

   #+BEGIN_SRC bash :eval never
createorgproject MyProject
   #+END_SRC

   Please note that by default, this script will *never* overwrite
   anything. If to want to overwrite, use the =-f= option.

   *Important:* if you just created a fresh new project be sure that there
   is a =.git= directory as it is used to locate the project root. If you
   simply want to do a quick test you can do
   #+BEGIN_SRC bash :eval never
cd MyProject
echo >> .git
   #+END_SRC
   as an alternative.

   Once that the script has been run you can use Emacs as usual:
   #+BEGIN_SRC bash :eval never
emacs MyProject/page_example.org &
   #+END_SRC

   Then load your project configuration *M-x my-new-project-configuration*

   Then you can do whatever you want, for instance publish your project
   with *C-c C-e P p* and visit the generated pages:
   #+BEGIN_SRC bash :eval never
firefox  MyProject/index.html
   #+END_SRC

   *Note:* you can also try *C-c C-e l o* to check PDF exports.

* Project structure
  :PROPERTIES:
  #  :header-args: :tangle-mode (identity #o444) :mkdirp yes
  :header-args: :mkdirp yes
  :END:
** =project root=
   #+INDEX:directory

   Create files at project root
*** =theindex_org=
    #+INDEX:file:theindex.org

    This file includes the generated index

    #+HEADER: :noweb-ref theindex.org
    #+BEGIN_SRC org :noweb yes :tangle yes :tangle theindex.org
,#+CALL: Setup()
,#+TITLE: Index
,#+HTML_LINK_UP: ./index.html
,#+HTML_LINK_HOME: ./index.html

,#+INCLUDE: "theindex.inc"
    #+END_SRC

*** =todo.org=
    #+INDEX:file:todo.org

    #+HEADER: :noweb-ref todo.org
    #+BEGIN_SRC org :noweb yes :tangle yes :tangle todo.org
,#+CALL: Setup()
,#+TITLE: TODO list 
,#+HTML_LINK_UP: ./index.html
,#+HTML_LINK_HOME: ./index.html
    #+END_SRC

*** =journal.org=
    #+INDEX:file:journal.org

    #+HEADER: :noweb-ref journal.org
    #+BEGIN_SRC org :noweb yes :tangle yes :tangle journal.org
,#+CALL: Setup()
,#+TITLE: Journal
,#+HTML_LINK_UP: ./index.html
,#+HTML_LINK_HOME: ./index.html
    #+END_SRC

*** =www_links.org=
    #+INDEX:file:www_links.org

    #+HEADER: :noweb-ref www_links.org 
    #+BEGIN_SRC org :noweb yes :tangle yes :tangle www_links.org
,#+CALL: Setup()
,#+TITLE: External web links
,#+HTML_LINK_UP: ./index.html
,#+HTML_LINK_HOME: ./index.html
    #+END_SRC

** =setup/=
   #+INDEX:directory!setup

   This directory contains the configuration files.

*** =setup/library-of-babel.org=
    :PROPERTIES:
    :ID:       358f0e27-0b25-472b-b8d0-e368ea8ba871
    :END:
    #+INDEX: file!setup/library-of-babel.org

    This file contains function definitions, that are loaded with [[id:3179dc59-bf96-4c38-ab21-6de2d0dcb8a8][=org-babel-lob-ingest=]].

**** The =Setup()= command
     :PROPERTIES:
     :ID:       25b27bbf-6bb7-4dfa-a016-50266497a98d
     :END:
     :BACKLINKS:
     [2020-05-23 Sat 12:07] <- [[id:7102a2f8-70da-4fee-9bff-ae78e1c90be3][Use =minted= for listings]]
     :END:

     The =#+CALL: Setup()= has to be set at the beginning of your org file (see: [[file:example/example.org][file:example/example.org]]).

     The latex package [[https://ctan.org/pkg/verbatim?lang=en][verbatim]] is required by the bibliography trick in
     [[id:f64ef356-3f8c-4e37-93c6-34719a9393ae][=Bibliography()=]] to support both html and pdf export.

     The [[https://ctan.org/pkg/minted?lang=en][minted]] package is used for code listings

     #+HEADER: :noweb-ref setup/library-of-babel.org
     #+BEGIN_SRC org
,#+NAME: Setup
,#+BEGIN_SRC emacs-lisp :results drawer
(concat 
 "#+OPTIONS: H:3 toc:t num:t \\n:nil ::t |:t ^:{} -:t f:t *:t tex:t d:t tags:not-in-toc \n"

 "#+PROPERTY: header-args :mkdirp yes \n"

 "#+HTML_HEAD_EXTRA: <style type=\"text/css\"> blockquote {background:#EEEEEE; padding: 3px 13px}    </style> \n"
 "#+HTML_HEAD_EXTRA: <style type=\"text/css\"> pre {background:#EEEEEE; padding: 3px 13px}    </style> \n"

 "#+LATEX_HEADER: \\usepackage[backend=biber, bibencoding=utf8 ]{biblatex}\n" 
 "#+LATEX_HEADER: \\usepackage{verbatim}\n" 
 "#+LATEX_HEADER: \\usepackage{minted}\n"
 "#+LATEX_HEADER: \\hypersetup{colorlinks=true}\n"
 "#+LATEX_HEADER: \\addbibresource{" my-project-root "bibliography/bibliography.bib}\n"

 "#+BEGIN_EXPORT latex \n"
 "% from: https://github.com/SublimeText/LaTeXTools/issues/657#issuecomment-188188632 \n"
 "\\renewcommand{\\MintedPygmentize}{/usr/bin/pygmentize} \n"
 "\\definecolor{bg}{rgb}{0.95,0.95,0.95} \n"
 "\\setminted{bgcolor=bg} \n"
 "\\setminted{fontsize=\\footnotesize}   \n"
 "\\setminted{breaklines} \n"
 "\\setminted{breakautoindent=false} \n"
 "\\setminted{mathescape} \n"
 "\\setminted{xleftmargin=0pt} \n"
 "#+END_EXPORT \n"
 )
,#+END_SRC
     #+END_SRC

**** The =Bibliography()= command
     :PROPERTIES:
     :ID:       f64ef356-3f8c-4e37-93c6-34719a9393ae
     :END:

     The =#+CALL: Bibliography()= has to be set where you want to insert your bilbliography (see: [[file:example/example.org][file:example/example.org]]).

     #+HEADER: :noweb-ref setup/library-of-babel.org
     #+BEGIN_SRC org
,#+NAME: Bibliography
,#+BEGIN_SRC emacs-lisp :results drawer
(concat "#+BEGIN_EXPORT latex\n\\printbibliography\n"
	"\\begin{comment}\n#+END_EXPORT\n"
	"bibliography:" my-project-root "bibliography/bibliography.bib\n"
	"#+BEGIN_EXPORT latex\n\\end{comment}\n#+END_EXPORT\n")
,#+END_SRC
     #+END_SRC

**** Export complete listing                                       :noexport:

     #+BEGIN_SRC org :exports code :noweb yes :tangle yes :tangle setup/library-of-babel.org
<<setup/library-of-babel.org>>
     #+END_SRC

*** =setup/setup.el= 
    :PROPERTIES:
    :ID:       dfcaca1b-a2db-4418-98d3-594593933cb7
    :END:
    #+INDEX: file!setup/setup.el

    This file contains code executed by the =my-new-project-configuration=
    function. At this point there is only one variable =my-project-root=
    containing the project root.

**** Configuration message

     Print a message 
     #+HEADER: :noweb-ref setup/setup.el
     #+BEGIN_SRC emacs-lisp
;; Configuration message
(message (format "Configuring %s" my-project-root))
     #+END_SRC

**** Use =minted= for listings
     :PROPERTIES:
     :ID:       7102a2f8-70da-4fee-9bff-ae78e1c90be3
     :END:

     See [[id:25b27bbf-6bb7-4dfa-a016-50266497a98d][=Setup()=]]

     #+HEADER: :noweb-ref setup/setup.el
     #+BEGIN_SRC emacs-lisp
;; use =minted= for listings
(setq org-latex-listings 'minted)
     #+END_SRC

**** Load =library-of-babel.org=
     :PROPERTIES:
     :ID:       3179dc59-bf96-4c38-ab21-6de2d0dcb8a8
     :END:
     :BACKLINKS:
     [2020-05-23 Sat 12:23] <- [[id:358f0e27-0b25-472b-b8d0-e368ea8ba871][=setup/library-of-babel.org=]]
     :END:

     #+HEADER: :noweb-ref setup/setup.el
     #+BEGIN_SRC emacs-lisp
;; Load =library-of-babel.org=
(org-babel-lob-ingest (concat my-project-root "setup/library-of-babel.org"))
     #+END_SRC

     See: [[id:358f0e27-0b25-472b-b8d0-e368ea8ba871][=library-of-babel.org=]]

**** =org-publish-project-alist= definition

     The first task is to define how to publish the project:

     #+HEADER: :noweb-ref setup/setup.el
     #+BEGIN_SRC emacs-lisp
;; =org-publish-project-alist= definition
(setq my-publish-dir (concat my-project-root "docs"))

(defun my-org-publish-sitemap (title list)
  "Create my own index.org instead of the default one"
  (concat
   "#+CALL: Setup()\n"
   "#+INCLUDE: \"setup/index_preamble.org\"\n"
   "#+OPTIONS: toc:nil\n\n"
   "* My Sitemap\n\n"
   (org-list-to-org list)
   "\n\n"))

(setq org-publish-project-alist
      `(
	("My_Project_Name-org-files",
	 :base-directory ,my-project-root
	 :base-extension "org"
	 :recursive t
	 :publishing-directory ,my-publish-dir
	 :publishing-function org-html-publish-to-html
	 :sitemap-function my-org-publish-sitemap
	 :htmlize-source t
	 :sitemap-sort-files anti-chronologically
	 :exclude "setup/*"
	 ;; Generates theindex.org + inc files
	 :makeindex t
	 ;; Creates index.org, calls my-org-publish-sitemap to fill it
	 :auto-sitemap t
	 :sitemap-filename "index.org"
	 )

	("My_Project_Name-data-files",
	 :base-directory ,my-project-root
	 :base-extension "nb\\|?pp\\|png"
	 :recursive t
	 :publishing-directory ,my-publish-dir
	 :publishing-function org-publish-attachment
	 :exclude ".*bazel-.*"
	 )

	;; Main
	("My_Project_Name",
	 :components ("My_Project_Name-org-files" "My_Project_Name-data-files")
	 )
	)
      )
     #+END_SRC

**** Feed =org-agenda-files= with org files

     Then we use the =find= command to feed the =org-agenda-files= variable:

     #+HEADER: :noweb-ref setup/setup.el
     #+BEGIN_SRC emacs-lisp

(setq org-agenda-files
      (split-string
       (shell-command-to-string (format "cd %s; find -name '*.org' ! -name 'index.org'  ! -name 'agenda.org'  ! -name '.#*' ! -path './setup/*'" my-project-root))
       ))
     #+END_SRC

**** Some captures with their files

     *CAVEAT:* these files, "www_links.org", "journal.org", "todo.org" must exist.

     #+HEADER: :noweb-ref setup/setup.el
     #+BEGIN_SRC emacs-lisp
(setq my-www-links-filename (concat my-project-root "www_links.org"))
(setq my-journal-filename (concat my-project-root "journal.org"))
(setq my-todo-filename (concat my-project-root "todo.org"))

(setq-default org-display-custom-times t)
(setq org-time-stamp-custom-formats '("<%a %b %e %Y>" . "<%a %b %e %Y %H:%M>"))

(setq org-capture-templates
      `(
	("A"
	 "Agenda/Meeting" entry (file+headline "~/GitLab/PVBibliography/agenda.org" "Agenda")
	 "* %^{Title?} %^G\n:PROPERTIES:\n:Created: %U\n:END:\n\n%?"
	 :empty-lines 1  
	 :create t
	 )

	("K" "Log Time" entry (file+datetree "~/GitLab/PVBibliography/activity.org" "Activity")
	 "* %U - %^{Activity}  :TIME:"
	 )
	

	;;----------------
	
	("t"
	 "Todo" entry (file+olp+datetree ,my-todo-filename)
	 "* TODO %^{Title?} [/] %^G\n:PROPERTIES:\n:Created: %U\n:END:\n\n - [ ] %?"
	 :empty-lines 1  
	 :create t
	 )
	
	("T"
	 "Todo with file link" entry (file+olp+datetree ,my-todo-filename)
	 "* TODO %^{Title|%f} [/] %^G\n:PROPERTIES:\n:Created: %U\n:END:\n\nBack link: %a\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n - [ ] %?"
	 :empty-lines 1  
	 :create t
	 )
	
	("j" "Journal" entry (file+olp+datetree ,my-journal-filename)
	 "* %^{Title} %^G\n\n%?"
	 :empty-lines 1  
	 :create t
	 )
	("J" 
	 "Journal with file link" entry (file+olp+datetree ,my-journal-filename)
	 "* %^{Title|%f} %^G\n\nBack link: %a\n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?"
	 :empty-lines 1  
	 :create t
	 )
	;;
	;; See: https://github.com/sprig/org-capture-extension for further details
	;;
	("L" 
	 "Protocol Link" entry (file ,my-www-links-filename)
	 "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] \
		%^G\n:PROPERTIES:\n:Created: %U\n:END:\n\n%?"
	 :empty-lines 1  
	 :create t
	 )
	
	("p" 
	 "Protocol" entry (file ,my-www-links-filename)
	 "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]] \
		 %^G\n:PROPERTIES:\n:Created: %U\n:END:\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?"
	 :empty-lines 1  
	 :create t
	 )
	))
     #+END_SRC

**** org-ref configuration

     #+HEADER: :noweb-ref setup/setup.el
     #+BEGIN_SRC emacs-lisp
(setq my-bibtex-filename 
      (concat my-project-root "bibliography/bibliography.bib"))
(if (file-exists-p my-bibtex-filename)
    ;; If bibliography.bib exists 
    (setq reftex-default-bibliography  `(,my-bibtex-filename)
	  bibtex-completion-notes-extension "-notes.org"
	  bibtex-completion-notes-template-multiple-files "#+CALL: Setup()\n#+TITLE: ${author-or-editor} (${year}): ${title}\n\n* Personal Notes\n  :PROPERTIES:\n  :NOTER_DOCUMENT: ~/AnnotatedPDF/${=key=}.pdf\n  :END:\n\n[[file:~/AnnotatedPDF/${=key=}.pdf][${title}]]\n"
	  bibtex-completion-bibliography my-bibtex-filename
	  bibtex-completion-library-path (file-name-directory my-bibtex-filename)
	  bibtex-completion-notes-path (file-name-directory my-bibtex-filename)
	  
	  org-ref-default-bibliography  `(,my-bibtex-filename)
	  org-ref-pdf-directory (file-name-directory my-bibtex-filename)
	  )
  ;; otherwise unbound meaningless my-bibtex-filename
  (makunbound 'my-bibtex-filename)
  )
     #+END_SRC

**** PDF generation

     #+HEADER: :noweb-ref setup/setup.el
     #+BEGIN_SRC emacs-lisp
;; defines how to generate the pdf file using lualatex + biber
(setq org-latex-pdf-process
      '("lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	"biber %b"
	"lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	"lualatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
     #+END_SRC

**** Export complete file                                          :noexport:

     #+BEGIN_SRC emacs-lisp :exports none :noweb yes :tangle yes :tangle setup/setup.el

(if my-project-root
    ;; Configuration
    (progn
      <<setup/setup.el>>
      )
  )
     #+END_SRC


*** =setup/index_preamble.org=
    #+INDEX:file:setup/index_preamble.org

    This is file included in sitemap.org. Note: no need for =Setup()=,
    it is already declared in the template.

    #+HEADER: :noweb-ref setup/index_preamble.org
    #+BEGIN_SRC org :noweb yes :tangle yes :tangle setup/index_preamble.org
,#+TITLE: My_Project_Name

# add what you want
    #+END_SRC
     
** =bibliography/=

   This directory contains the [[id:377d8ec4-3d02-4ddf-8fca-6c816afe2b15][=bibliography.bib=]] file. 

*** =bibliography.bib=
    :PROPERTIES:
    :ID:       377d8ec4-3d02-4ddf-8fca-6c816afe2b15
    :END:
    #+INDEX:file!bibliography.bib 

    To be used as example here is our =bibliography.bib= example file. I
    found convenient to provide a directory and not only the
    =bibliography.bib= as I can annotate my reference here.

    #+HEADER: :noweb-ref bibliography/bibliography.bib 
    #+BEGIN_SRC bib :mkdir yes :tangle yes :tangle bibliography/bibliography.bib 
@book{dominik16_org_mode_ref_manual,
  author =	 {Dominik, C.},
  title =	 {ORG MODE 9 REF MANUAL},
  year =	 2016,
  publisher =	 {ARTPOWER International PUB},
  isbn =	 9789888406852,
}

@Book{lewis00_gnu_emacs_lisp,
  author =	 {Lewis, Bil},
  title =	 {The GNU Emacs Lisp reference manual : for Emacs
                  Version 21, Revision 2.6, May 2000},
  year =	 2000,
  publisher =	 {Free Software Foundation},
  address =	 {Boston, MA},
  isbn =	 {978-1882114733},
}
    #+END_SRC

** =example/=
   #+INDEX:directory!example

*** =example/example.org=
    #+INDEX:file:example/example.org

    This is a page demo to check it works.

**** File header

     To be properly configured the org mode file can begin as follows:

     #+HEADER: :noweb-ref example/example.org
     #+BEGIN_SRC org 
,#+CALL: Setup()
,#+TITLE: One example file
,#+HTML_LINK_UP: ../index.html
,#+HTML_LINK_HOME: ../index.html
     #+END_SRC
     
     For explanations:
     https://emacs.stackexchange.com/q/58633/13563. 

     - [ ] another possibility is to use yasnippet

**** Equation example

     Check if equations are processed with mathjax

     #+HEADER: :noweb-ref example/example.org
     #+BEGIN_SRC org
,* An equation

  Do GitHub pages support equation rendering?
  \begin{equation*}
  \int \cos{(x)} dx = \sin{(x)}
  \end{equation*}
     #+END_SRC 

**** Code block example

     We then add a code block to see that background is gray colored

     #+HEADER: :noweb-ref example/example.org
     #+BEGIN_SRC org 
,* A code block example 
  ,#+BEGIN_SRC cpp 
#include <iostream>
int main()
{
  std::cout << "Hello world!" << std:endl;
  return 0;
}
  ,#+END_SRC

     #+END_SRC


**** Bibliographic reference example

     #+HEADER: :noweb-ref example/example.org
     #+BEGIN_SRC org 
,* A bibliographic reference
  Test bibliography: cite:lewis00_gnu_emacs_lisp
,* Another section

  # put the bibliography here
  ,#+CALL: Bibliography()
     #+END_SRC
 
**** The complete =example.org= file                                 :noexport:
   
     #+BEGIN_SRC org :exports none :noweb yes :tangle yes :tangle example/example.org
<<example/example.org>>
     #+END_SRC

* ~create_orgMode_project~ script                                    :noexport:

  #+BEGIN_SRC bash :noweb yes :tangle yes :tangle create_orgMode_project :shebang "#!/bin/bash" :exports none :eval never

#################
# Parse command #
#################

set -e

error=0
force=0
project_dir=""

while [ "$1" != "" ]; do
    case $1 in
        -f )       force=1
		   ;;
	-* )       error=1
                   ;;
        ,* )       if [ "$project_dir" == "" ]; then 
		      project_dir=$1 
		  else 
		      error=1 
		  fi 
    esac
    shift
done

if [ $error == 1 ]; then
    echo "Usage: $(basename $0) project_dir -f"
    echo ""
    echo " Create a directory 'project_dir' and populate it with some configuration files"
    echo " By default never overwrite files, use -f to force overwriting"
    exit 0
fi

project_name=$(basename "$project_dir")

##########################
# Creates root directory #
##########################

echo "Creates directory $project_dir" 
mkdir -p "$project_dir"

#############################
# Creates setup dir & files #
#############################

echo "Creates directory $project_dir/setup" 
mkdir -p "$project_dir/setup"

#----------------

current_file="$project_dir/setup/setup.el"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
<<setup/setup.el>>
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/setup/library-of-babel.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
<<setup/library-of-babel.org>>
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/setup/index_preamble.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
<<setup/index_preamble.org>>
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#############################
# Creates biblio dir & file #
#############################

echo "Creates directory $project_dir/bibliography" 
mkdir -p "$project_dir/bibliography"

#----------------

current_file="$project_dir/bibliography/bibliography.bib"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM' 
<<bibliography/bibliography.bib>>
//MY_CODE_STREAM
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

##############################################
# Creates remaining files (index_preamble.org, ...) #
##############################################


#----------------

current_file="$project_dir/theindex.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
<<theindex.org>>
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/todo.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
<<todo.org>>
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/journal.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
<<journal.org>>
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

#----------------

current_file="$project_dir/www_links.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
<<www_links.org>>
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi

########################
# Creates example file #
########################

echo "Creates directory $project_dir/example" 
mkdir -p "$project_dir/example"

#----------------

current_file="$project_dir/example/example.org"

if [ "$force" -eq 1 ] || [ ! -f "$current_file" ]; then
    echo "Creates file      $current_file" 
    more > "$current_file" <<'//MY_CODE_STREAM'
<<example/example.org>>
//MY_CODE_STREAM
    #
    # replace project name 
    #
    sed -i "s/My_Project_Name/$project_name/g" "$current_file"
else 
    echo "File $current_file already exists, aborted! (you can use -f to force overwrite)" 
    exit 1
fi
  #+END_SRC

